using PaulasCadenza.Utilities;
using System;
using System.Linq;

namespace PaulasCadenza.HabboDHM
{
	public sealed class RC4 : IDisposable
	{
		private const uint PoolSize = 256;

		private int _i = 0, _j = 0;
		private bool _disposed = false;
		private readonly byte[] _S = new byte[PoolSize];

		public RC4(byte[] key)
		{
			for (var i = 0; i < PoolSize; ++i)
			{
				_S[i] = (byte)i;
			}

			if(key != null)
			{
				var j = 0;
				for (var i = 0; i < PoolSize; ++i)
				{
					j = (j + _S[i] + key[i % key.Length]) & 0xff;
					var t = _S[i];
					_S[i] = _S[j];
					_S[j] = t;
				}
			}
		}

		public byte Next()
		{
			if (_disposed)
			{
				throw new ObjectDisposedException(GetType().Name);
			}
			_i = (_i + 1) & 255;
			_j = (_j + _S[_i]) & 255;
			var t = _S[_i];
			_S[_i] = _S[_j];
			_S[_j] = t;
			return _S[(t + _S[_i]) & 0xff];
		}

		public byte[] EnDecrypt(byte[] block)
		{
			for(var i = 0; i < block.Length; ++i)
			{
				block[i] ^= Next();
			}
			return block;
		}

		public void Dispose()
		{
			if (_disposed) { return; }
			_disposed = true;
			PRNG.Instance.NextBytes(_S);
			_i = _j = -1;
		}

		public static bool TestCase() =>
			new Tuple<byte[], byte[]>[]
			{
				new Tuple<byte[], byte[]>(
					new byte[] { 0x99, 0x3a, 0x6e, 0x57, 0xd1, 0x03, 0xef, 0x8a, 0xff, 0xc2, 0x53, 0xc8, 0x41, 0x68, 0x9f, 0xd2 },
					new byte[] { 0x45, 0xb1, 0xdd, 0xd8, 0xeb, 0x16, 0xda, 0x56, 0x6c, 0x43, 0x57, 0x42, 0xf3, 0x37, 0x0d, 0x43 }),
				new Tuple<byte[], byte[]>(
					new byte[] { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
					new byte[] { 0x6d, 0x25, 0x2f, 0x24, 0x70, 0x53, 0x1b, 0xb0, 0x39, 0x4b, 0x93, 0xb4, 0xc4, 0x6f, 0xdd, 0x9c }),
				new Tuple<byte[], byte[]>(
					new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
					new byte[] { 0xde, 0x18, 0x89, 0x41, 0xa3, 0x37, 0x5d, 0x3a, 0x8a, 0x06, 0x1e, 0x67, 0x57, 0x6e, 0x92, 0x6d }),
				new Tuple<byte[], byte[]>(
					new byte[] { 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 },
					new byte[] { 0x06, 0x08, 0x0e, 0x0e, 0x18, 0x20, 0x29, 0x29, 0x39, 0x33, 0x49, 0x57, 0x66, 0x76, 0x87, 0x83 })
			}.All(t =>
			{
				using (var rc4 = new RC4(t.Item1))
				{
					if (!t.Item2.All(x => rc4.Next() == x)) { return false; }
				}
				return true;
			});
	}
}
